}
# If the matrices are different, it assumes two things: (1) that the user
# wants to know the inverse of the matrix given to the function
# "cacheSolve", and (2) that the user wants this new matrix and its inverse
# to be the ones stored in cache.
else {
cachematrix <<- x
cacheinverse <<- solve(x)
return(cacheinverse)
}
}
# cacheinverse <- NULL
testmatrix <- matrix(1:4, nrow = 2, ncol = 2) # Matrix with inverse
makeCacheMatrix(testmatrix)
cacheSolve()
testmatrix <- matrix(1:9, 3, 3) # Trying to use a matrix without inverse
makeCacheMatrix(testmatrix)
cacheSolve()
makeCacheMatrix <- function(x = matrix()) {
message("Storing the matrix and its inverse in cache for recalling with \"cacheSolve\" function.")
# Creates the object "cachematrix" in the working environment (outside the
# function) which will store the matrix given to the function.
cachematrix <<- x
# Creates the object "cacheinverse" in the working environment (outside the
# function) which will store the inverse of the matrix given to the
# function.
cacheinverse <<- solve(x)
}
cacheSolve <- function(x = NULL, ...) {
# Checks if the function has been given a matrix. If no matrix has been
# given to the function, then it will use the matrix stored by the function
# "makeCacheMatrix" in the object "cachematrix". This allows the user to
# quickly call on the inverse stored in cache without having to retype the
# name to the matrix every time.
if (is.null(x)){
message("No matrix given. Recalling matrix stored in cache by \"makeCacheMatrix\"")
x <- cachematrix
}
# Checks if the matrix given to this function is the same as the one stored
# in the cache.
if (identical(x, cachematrix)){
# If both matrices are the same, it returns the inverse of the matrix
# that has already been computed by "makeCacheMatrix" and stored in
# cache "cacheinverse".
message("Returning inverse of matrix stored in cache:")
return(cacheinverse)
}
# If the matrices are different, it assumes two things: (1) that the user
# wants to know the inverse of the matrix given to the function
# "cacheSolve", and (2) that the user wants this new matrix and its inverse
# to be the ones stored in cache.
else {
message("New matrix given. Computing its inverse and storing it in cache.")
cachematrix <<- x
cacheinverse <<- solve(x)
return(cacheinverse)
}
}
# cacheinverse <- NULL
testmatrix <- matrix(1:4, nrow = 2, ncol = 2) # Matrix with inverse
makeCacheMatrix(testmatrix)
makeCacheMatrix <- function(x = matrix()) {
message("| Storing the matrix and its inverse in cache for recalling with \"cacheSolve\" function.")
# Creates the object "cachematrix" in the working environment (outside the
# function) which will store the matrix given to the function.
cachematrix <<- x
# Creates the object "cacheinverse" in the working environment (outside the
# function) which will store the inverse of the matrix given to the
# function.
cacheinverse <<- solve(x)
}
cacheSolve <- function(x = NULL, ...) {
# Checks if the function has been given a matrix. If no matrix has been
# given to the function, then it will use the matrix stored by the function
# "makeCacheMatrix" in the object "cachematrix". This allows the user to
# quickly call on the inverse stored in cache without having to retype the
# name to the matrix every time.
if (is.null(x)){
message("| No matrix given. Recalling matrix stored in cache by \"makeCacheMatrix\"")
x <- cachematrix
}
# Checks if the matrix given to this function is the same as the one stored
# in the cache.
if (identical(x, cachematrix)){
# If both matrices are the same, it returns the inverse of the matrix
# that has already been computed by "makeCacheMatrix" and stored in
# cache "cacheinverse".
message("| Returning inverse of matrix stored in cache:")
return(cacheinverse)
}
# If the matrices are different, it assumes two things: (1) that the user
# wants to know the inverse of the matrix given to the function
# "cacheSolve", and (2) that the user wants this new matrix and its inverse
# to be the ones stored in cache.
else {
message("| New matrix given. Computing its inverse and storing it in cache.")
cachematrix <<- x
cacheinverse <<- solve(x)
return(cacheinverse)
}
}
makeCacheMatrix(testmatrix)
cacheSolve()
# Creates the object "cacheinverse" in the working environment (outside the
# function) which will store the inverse of the matrix given to the
# function.
cacheinverse <<- solve(x)
makeCacheMatrix <- function(x = matrix()) {
message("| Storing the matrix and its inverse in cache for recalling with \"cacheSolve\" function.")
# Creates the object "cachematrix" in the working environment (outside the
# function) which will store the matrix given to the function.
cachematrix <<- x
# Creates the object "cacheinverse" in the working environment (outside the
# function) which will store the inverse of the matrix given to the
# function.
cacheinverse <<- solve(x)
}
cacheSolve <- function(x = NULL, ...) {
# Checks if the function has been given a matrix. If no matrix has been
# given to the function, then it will use the matrix stored by the function
# "makeCacheMatrix" in the object "cachematrix". This allows the user to
# quickly call on the inverse stored in cache without having to retype the
# name to the matrix every time.
if (is.null(x)){
message("| No matrix given. Recalling matrix stored in cache by \"makeCacheMatrix\".")
x <- cachematrix
}
# Checks if the matrix given to this function is the same as the one stored
# in the cache.
if (identical(x, cachematrix)){
# If both matrices are the same, it returns the inverse of the matrix
# that has already been computed by "makeCacheMatrix" and stored in
# cache "cacheinverse".
message("| Returning matrix inverse stored in cache:")
return(cacheinverse)
}
# If the matrices are different, it assumes two things: (1) that the user
# wants to know the inverse of the matrix given to the function
# "cacheSolve", and (2) that the user wants this new matrix and its inverse
# to be the ones stored in cache.
else {
message("| New matrix given. Computing its inverse and storing it in cache.")
cachematrix <<- x
cacheinverse <<- solve(x)
return(cacheinverse)
}
}
makeCacheMatrix(testmatrix)
testmatrix <- matrix(1:9, 3, 3) # Trying to use a matrix without inverse
cacheSolve()
cacheSolve(testmatrix)
cacheSolve <- function(x = NULL, ...) {
# Checks if the function has been given a matrix. If no matrix has been
# given to the function, then it will use the matrix stored by the function
# "makeCacheMatrix" in the object "cachematrix". This allows the user to
# quickly call on the inverse stored in cache without having to retype the
# name to the matrix every time.
if (is.null(x)){
message("| No matrix given. Recalling matrix stored in cache by \"makeCacheMatrix\".")
x <- cachematrix
}
# Checks if the matrix given to this function is the same as the one stored
# in the cache.
if (identical(x, cachematrix)){
# If both matrices are the same, it returns the inverse of the matrix
# that has already been computed by "makeCacheMatrix" and stored in
# cache "cacheinverse".
message("| Returning matrix inverse stored in cache:")
return(cacheinverse)
}
# If the matrices are different, it assumes two things: (1) that the user
# wants to know the inverse of the matrix given to the function
# "cacheSolve", and (2) that the user wants this new matrix and its inverse
# to be the ones stored in cache.
else {
message("| New matrix given. Attempting to compute its inverse and store it in cache.")
cachematrix <<- x
cacheinverse <<- solve(x)
return(cacheinverse)
}
}
cacheSolve(testmatrix)
# cacheinverse <- NULL
testmatrix <- matrix(1:4, nrow = 2, ncol = 2) # Matrix with inverse
makeCacheMatrix(testmatrix)
testmatrix <- matrix(1:9, 3, 3) # Trying to use a matrix without inverse
cacheSolve(testmatrix)
rm(list = ls())
makeCacheMatrix <- function(x = matrix()) {
message("| Storing the matrix and its inverse in cache for recalling with \"cacheSolve\" function.")
# Creates the object "cachematrix" in the working environment (outside the
# function) which will store the matrix given to the function.
cachematrix <<- x
# Creates the object "cacheinverse" in the working environment (outside the
# function) which will store the inverse of the matrix given to the
# function.
cacheinverse <<- solve(x)
}
cacheSolve <- function(x = NULL, ...) {
# Checks if the function has been given a matrix. If no matrix has been
# given to the function, then it will use the matrix stored by the function
# "makeCacheMatrix" in the object "cachematrix". This allows the user to
# quickly call on the inverse stored in cache without having to retype the
# name to the matrix every time.
if (is.null(x)){
message("| No matrix given. Recalling matrix stored in cache by \"makeCacheMatrix\".")
x <- cachematrix
}
# Checks if the matrix given to this function is the same as the one stored
# in the cache.
if (identical(x, cachematrix)){
# If both matrices are the same, it returns the inverse of the matrix
# that has already been computed by "makeCacheMatrix" and stored in
# cache "cacheinverse".
message("| Returning matrix inverse stored in cache:")
return(cacheinverse)
}
# If the matrices are different, it assumes two things: (1) that the user
# wants to know the inverse of the matrix given to the function
# "cacheSolve", and (2) that the user wants this new matrix and its inverse
# to be the ones stored in cache.
else {
message("| New matrix given. Attempting to compute its inverse and store it in cache.")
cachematrix <<- x
cacheinverse <<- solve(x)
return(cacheinverse)
}
}
# cacheinverse <- NULL
testmatrix1 <- matrix(1:4, nrow = 2, ncol = 2) # Matrix with inverse
makeCacheMatrix(testmatrix1)
cacheSolve()
makeCacheMatrix <- function(x = matrix()) {
message("| Attempting to store the matrix and its inverse in cache for
future use with the function \"cacheSolve\".")
# Creates the object "cachematrix" in the working environment (outside the
# function) which will store the matrix given to the function.
cachematrix <<- x
# Creates the object "cacheinverse" in the working environment (outside the
# function) which will store the inverse of the matrix given to the
# function.
cacheinverse <<- solve(x)
}
cacheSolve <- function(x = NULL, ...) {
# Checks if the function has been given a matrix. If no matrix has been
# given to the function, then it will use the matrix stored by the function
# "makeCacheMatrix" in the object "cachematrix". This allows the user to
# quickly call on the inverse stored in cache without having to retype the
# name to the matrix every time.
if (is.null(x)){
message("| No matrix given. Recalling matrix stored in cache by \"makeCacheMatrix\".")
x <- cachematrix
}
# Checks if the matrix given to this function is the same as the one stored
# in the cache.
if (identical(x, cachematrix)){
# If both matrices are the same, it returns the inverse of the matrix
# that has already been computed by "makeCacheMatrix" and stored in
# cache "cacheinverse".
message("| Returning matrix inverse stored in cache:")
return(cacheinverse)
}
# If the matrices are different, it assumes two things: (1) that the user
# wants to know the inverse of the matrix given to the function
# "cacheSolve", and (2) that the user wants this new matrix and its inverse
# to be the ones stored in cache.
else {
message("| New matrix given. Attempting to compute its inverse and store it in cache.")
cachematrix <<- x
cacheinverse <<- solve(x)
return(cacheinverse)
}
}
# cacheinverse <- NULL
testmatrix1 <- matrix(1:4, nrow = 2, ncol = 2) # Matrix with inverse
testmatrix2 <- matrix(1:9, 3, 3) # Trying to use a matrix without inverse
testmatrix3 <- matrix(3:8, 2, 3) # Trying to use a matrix not square
makeCacheMatrix(testmatrix1)
cacheSolve()
cacheSolve(testmatrix2)
cacheSolve(testmatrix2)
identical(testmatrix1, testmatrix2)
solve(testmatrix2)
cacheSolve(testmatrix2)
solve(testmatrix2)
cacheSolve(testmatrix1)
cacheSolve(testmatrix3)
cacheSolve(testmatrix3)
solve(testmatrix2)
solve(testmatrix3)
# cacheinverse <- NULL
testmatrix1 <- matrix(1:4, nrow = 2, ncol = 2) # Valid matrix.
testmatrix2 <- matrix(3:6, 2, 2) # Different valid matrix.
testmatrix3 <- matrix(1:9, 3, 3) # Matrix without inverse.
testmatrix4 <- matrix(3:8, 2, 3) # Matrix that is not square.
# Creates the object "cachematrix" in the working environment (outside the
# function) which will store the matrix given to the function.
cachematrix <<- x
# Creates the object "cacheinverse" in the working environment (outside the
# function) which will store the inverse of the matrix given to the
# function.
cacheinverse <<- solve(x)
makeCacheMatrix <- function(x = matrix()) {
message("| Attempting to store the matrix and its inverse in cache for
future use with the function \"cacheSolve\".")
# Creates the object "cachematrix" in the working environment (outside the
# function) which will store the matrix given to the function.
cachematrix <<- x
# Creates the object "cacheinverse" in the working environment (outside the
# function) which will store the inverse of the matrix given to the
# function.
cacheinverse <<- solve(x)
}
cacheSolve <- function(x = NULL, ...) {
# Checks if the function has been given a matrix. If no matrix has been
# given to the function, then it will use the matrix stored by the function
# "makeCacheMatrix" in the object "cachematrix". This allows the user to
# quickly call on the inverse stored in cache without having to retype the
# name to the matrix every time.
if (is.null(x)){
message("| No matrix given. Recalling matrix stored in cache by
\"makeCacheMatrix\".")
x <- cachematrix
}
# Checks if the matrix given to this function is the same as the one stored
# in the cache.
if (identical(x, cachematrix)){
# If both matrices are the same, it returns the inverse of the matrix
# that has already been computed by "makeCacheMatrix" and stored in
# cache "cacheinverse".
message("| Returning matrix inverse stored in cache:")
return(cacheinverse)
}
# If the matrices are different, it assumes two things: (1) that the user
# wants to know the inverse of the matrix given to the function
# "cacheSolve", and (2) that the user wants this new matrix and its inverse
# to be the ones stored in cache.
else {
message("| New matrix given. Attempting to compute its inverse and
store it in cache.")
cachematrix <<- x
cacheinverse <<- solve(x)
return(cacheinverse)
}
}
solve(testmatrix2)
identical(testmatrix1, testmatrix2)
makeCacheMatrix(testmatrix1)
makeCacheMatrix <- function(x = matrix()) {
message("| Attempting to store the matrix and its inverse in cache for
future use with the function \"cacheSolve\"...")
# Creates the object "cachematrix" in the working environment (outside the
# function) which will store the matrix given to the function.
cachematrix <<- x
# Creates the object "cacheinverse" in the working environment (outside the
# function) which will store the inverse of the matrix given to the
# function.
cacheinverse <<- solve(x)
message("| No errors were encountered.")
}
return(cacheinverse)
# Checks if the matrix given to this function is the same as the one stored
# in the cache.
if (identical(x, cachematrix)){
# If both matrices are the same, it returns the inverse of the matrix
# that has already been computed by "makeCacheMatrix" and stored in
# cache "cacheinverse".
message("| Returning the inverse of the matrix stored in cache:")
return(cacheinverse)
}
# If the matrices are different, it assumes two things: (1) that the user
# wants to know the inverse of the matrix given to the function
# "cacheSolve", and (2) that the user wants this new matrix and its inverse
# to be the ones stored in cache.
else {
message("| New matrix given. Attempting to compute its inverse and
store it in cache...")
cachematrix <<- x
cacheinverse <<- solve(x)
message("| Returning the inverse of the new matrix:")
return(cacheinverse)
}
cacheSolve <- function(x = NULL, ...) {
# Checks if the function has been given a matrix. If no matrix has been
# given to the function, then it will use the matrix stored by the function
# "makeCacheMatrix" in the object "cachematrix". This allows the user to
# quickly call on the inverse stored in cache without having to retype the
# name to the matrix every time.
if (is.null(x)){
message("| No matrix given. Recalling matrix stored in cache by
\"makeCacheMatrix\"...")
x <- cachematrix
message("| No errors encountered.")
}
# Checks if the matrix given to this function is the same as the one stored
# in the cache.
if (identical(x, cachematrix)){
# If both matrices are the same, it returns the inverse of the matrix
# that has already been computed by "makeCacheMatrix" and stored in
# cache "cacheinverse".
message("| Returning the inverse of the matrix stored in cache:")
return(cacheinverse)
}
# If the matrices are different, it assumes two things: (1) that the user
# wants to know the inverse of the matrix given to the function
# "cacheSolve", and (2) that the user wants this new matrix and its inverse
# to be the ones stored in cache.
else {
message("| New matrix given. Attempting to compute its inverse and
store it in cache...")
cachematrix <<- x
cacheinverse <<- solve(x)
message("| Returning the inverse of the new matrix:")
return(cacheinverse)
}
}
makeCacheMatrix(testmatrix1)
makeCacheMatrix <- function(x = matrix()) {
message("| Attempting to store the matrix and its inverse in cache for
future use with the function \"cacheSolve\"...")
# Creates the object "cachematrix" in the working environment (outside the
# function) which will store the matrix given to the function.
cachematrix <<- x
# Creates the object "cacheinverse" in the working environment (outside the
# function) which will store the inverse of the matrix given to the
# function.
cacheinverse <<- solve(x)
message("| No errors encountered.")
}
makeCacheMatrix(testmatrix1)
cacheSolve()
cacheSolve <- function(x = NULL, ...) {
# Checks if the function has been given a matrix. If no matrix has been
# given to the function, then it will use the matrix stored by the function
# "makeCacheMatrix" in the object "cachematrix". This allows the user to
# quickly call on the inverse stored in cache without having to retype the
# name to the matrix every time.
if (is.null(x)){
message("| No matrix given. Recalling matrix stored in cache by
\"makeCacheMatrix\"...")
x <- cachematrix
message("| No errors encountered.")
}
# Checks if the matrix given to this function is the same as the one stored
# in the cache.
if (identical(x, cachematrix)){
# If both matrices are the same, it returns the inverse of the matrix
# that has already been computed by "makeCacheMatrix" and stored in
# cache "cacheinverse".
message("| Returning the inverse of the matrix stored in cache:")
return(cacheinverse)
}
# If the matrices are different, it assumes two things: (1) that the user
# wants to know the inverse of the matrix given to the function
# "cacheSolve", and (2) that the user wants this new matrix and its inverse
# to be the ones stored in cache.
else {
message("| New matrix given. Attempting to compute its inverse and
store it in cache...")
cachematrix <<- x
cacheinverse <<- solve(cachematrix)
message("| Returning the inverse of the new matrix:")
return(cacheinverse)
}
}
makeCacheMatrix(testmatrix1)
cacheSolve()
cacheSolve(testmatrix2)
cacheSolve <- function(x = NULL, ...) {
# Checks if the function has been given a matrix. If no matrix has been
# given to the function, then it will use the matrix stored by the function
# "makeCacheMatrix" in the object "cachematrix". This allows the user to
# quickly call on the inverse stored in cache without having to retype the
# name to the matrix every time.
if (is.null(x)){
message("| No matrix given. Recalling matrix stored in cache by
\"makeCacheMatrix\"...")
x <- cachematrix
message("| No errors encountered.")
}
# Checks if the matrix given to this function is the same as the one stored
# in the cache.
if (identical(x, cachematrix)){
# If both matrices are the same, it returns the inverse of the matrix
# that has already been computed by "makeCacheMatrix" and stored in
# cache "cacheinverse".
message("| Returning the inverse of the matrix stored in cache:")
return(cacheinverse)
}
# If the matrices are different, it assumes two things: (1) that the user
# wants to know the inverse of the matrix given to the function
# "cacheSolve", and (2) that the user wants this new matrix and its inverse
# to be the ones stored in cache.
else {
message("| New matrix given. Attempting to compute its inverse and
store it in cache...")
cachematrix <<- x
cacheinverse <<- solve(cachematrix)
message("| No errors encountered.")
message("| Returning the inverse of the new matrix:")
return(cacheinverse)
}
}
cacheSolve(testmatrix2)
makeCacheMatrix(testmatrix1)
cacheSolve()
cacheSolve(testmatrix2)
makeCacheMatrix(testmatrix1)
cacheSolve(testmatrix3)
cacheSolve(testmatrix3)
makeCacheMatrix(testmatrix1)
cacheSolve(testmatrix3)
